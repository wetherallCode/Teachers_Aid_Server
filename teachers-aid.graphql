### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


enum AcademicOutomeTypes {
  LOGIC_BUILDING
  SCHEMA_BUIDING
  SOCRATIC_QUESTIONS
}

input AddStudentsToCourseInput {
  course: String!
  studentUserName: String!
}

type AddStudentsToCoursePayload {
  course: Course!
}

input AssignEssayInput {
  assignedCourse: String!
  dueDate: Date!
  hasAssigner: String!
  markingPeriod: MarkingPeriodEnum!
  maxPoints: Int!
  readings: ReadingsInput!
  topic: TopicInput!
}

type AssignEssayPayload {
  essay: [Essay!]!
}

interface Assignment {
  _id: ID
  assignedDate: Date!
  dueDate: Date!
  exempt: Boolean!
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  markingPeriod: String!
  readings: Readings!
  score: Score!
}

type Course {
  _id: ID
  hasStudents: [Student!]!
  hasTeacher: Teacher!
  period: String!
}

input CreateCourseInput {
  period: String!
  taughtBy: String!
}

type CreateCoursePayload {
  course: Course!
}

input CreateTextSectionInput {
  fromText: String!
  hasProtocols: [TextSectionProtocolsInput!]!
  hasQuestions: [TextSectionQuestionsInput!]!
  header: String!
  pages: String!
  vocab: [VocabInput!]!
}

type CreateTextSectionPayload {
  textSection: TextSection!
}

scalar Date

scalar DateTime

type Essay implements Assignment {
  _id: ID
  assignedDate: Date!
  dueDate: Date!
  exempt: Boolean!
  finalDraft: FinalDraftContainer
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  markingPeriod: String!
  readings: Readings!
  score: Score!
  topic: Topic!
  workingDraft: WorkingDraft!
}

type FinalDraftContainer {
  returned: Boolean!
  submitted: Boolean!
  submittedFinalDraft: SubmittedFinalDraft!
  submitTime: DateTime
}

input FindAssignmentsToGradeInput {
  teacherUserName: String!
}

type FindAssignmentsToGradePayload {
  assignments: [Assignment!]!
}

input FindEssayByIdInput {
  _id: ID!
}

type FindEssayByIdPayload {
  essay: Essay!
}

input FindEssaysByUserNameAndMarkingPeriodInput {
  markingPeriod: MarkingPeriodEnum!
  userName: String!
}

type FindEssaysByUserNameAndMarkingPeriodPayload {
  essay: [Essay!]
}

input HasAssigner {
  assignerUserName: String
}

input HasOwnerInput {
  ownerUserName: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  password: String!
  userName: String!
}

type LoginPayload {
  user: User!
}

enum MarkingPeriodEnum {
  FIRST
  FOURTH
  SECOND
  THIRD
}

type Mutation {
  addStudentsToCourse(input: AddStudentsToCourseInput!): AddStudentsToCoursePayload!
  assignEssay(input: AssignEssayInput!): AssignEssayPayload!
  createCourse(input: CreateCourseInput!): CreateCoursePayload!
  createTextSection(input: CreateTextSectionInput!): CreateTextSectionPayload!
  login(input: LoginInput!): LoginPayload!
  logout: Boolean!
  returnGradedEssay(input: ReturnGradedEssayInput!): ReturnGradedEssayPayload!
  studentRegistration(input: StudentRegistrationInput!): StudentRegistrationPayload!
  submitEssayFinalDraft(input: SubmitEssayFinalDraftInput!): SubmitEssayFinalDraftPayload!
  teacherRegistration(input: TeacherRegistrationInput!): TeacherRegistrationPayload!
  updateWorkingDraft(input: UpdateWorkingDraftInput!): UpdateWorkingDraftPayload!
}

type Query {
  findAssignmentsToGrade(input: FindAssignmentsToGradeInput!): FindAssignmentsToGradePayload!
  findEssayById(input: FindEssayByIdInput!): FindEssayByIdPayload!
  findEssaysByUserNameAndMarkingPeriod(input: FindEssaysByUserNameAndMarkingPeriodInput!): FindEssaysByUserNameAndMarkingPeriodPayload!
  me: User
}

enum QuestionTypeEnum {
  HOW_CAUSE_EFFECT
  HOW_PROBLEM_SOLUTION
  WHY_CAUSE_EFFECT
}

type Reading_Guide implements Assignment {
  _id: ID
  assignedDate: Date!
  completion: String!
  dueDate: Date!
  exempt: Boolean!
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  markingPeriod: String!
  readings: Readings!
  score: Score!
}

type Readings {
  readingPages: String!
  readingSections: String!
}

input ReadingsInput {
  readingPages: String!
  readingSections: String!
}

input ReturnGradedEssayInput {
  _id: ID!
  comments: [String!]!
  gradedDraft: JSON!
  score: Int!
}

type ReturnGradedEssayPayload {
  essay: Essay!
}

type Score {
  earnedPoints: Int!
  maxPoints: Int!
}

type Student implements User {
  _id: ID
  email: String
  firstName: String!
  hasAssignments: [Assignment!]!
  inCourses: [Course!]!
  lastName: String!
  password: String!
  userName: String!
}

input StudentRegistrationInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  userName: String!
}

type StudentRegistrationPayload {
  student: Student!
}

input SubmitEssayFinalDraftInput {
  _id: ID!
  late: Boolean!
  submittedFinalDraft: SubmittedFinalDraftsInput!
}

type SubmitEssayFinalDraftPayload {
  essay: Essay!
}

type SubmittedFinalDraft {
  comments: [String!]!
  draft: JSON!
  gradingDraft: JSON!
  score: Int!
}

input SubmittedFinalDraftsInput {
  comments: [String!]!
  draft: JSON!
  gradingDraft: JSON!
  score: Int!
}

type Teacher implements User {
  _id: ID
  email: String
  firstName: String!
  hasCourses: [Course!]!
  lastName: String!
  password: String!
  title: TitleEnum!
  userName: String!
}

input TeacherRegistrationInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  title: TitleEnum!
  userName: String!
}

type TeacherRegistrationPayload {
  teacher: Teacher!
}

type Test implements Assignment {
  _id: ID
  assignedDate: Date!
  dueDate: Date!
  exempt: Boolean!
  hasAssigner: Teacher!
  hasOwner: Student!
  late: Boolean!
  markingPeriod: String!
  readings: Readings!
  score: Score!
  testName: String!
}

type TextSection {
  _id: ID
  fromText: String!
  hasProtocols: [TextSectionProtocols!]!
  hasQuestions: [TextSectionQuestions!]!
  header: String!
  pages: String!
  vocab: [Vocab!]!
}

"""Protocol suggestions for including in a LessonPlan"""
type TextSectionProtocols {
  academicOutcomeTypes: AcademicOutomeTypes!
  activityType: TextSectionProtocolTypes!
  element: String!
}

input TextSectionProtocolsInput {
  academicOutcomeTypes: AcademicOutomeTypes!
  activityType: TextSectionProtocolTypes!
  element: String!
}

enum TextSectionProtocolTypes {
  THINK_PAIR_SHARE
}

type TextSectionQuestions {
  question: String!
  questionType: QuestionTypeEnum!
}

input TextSectionQuestionsInput {
  question: String!
  questionType: QuestionTypeEnum!
}

scalar Time

enum TitleEnum {
  MISS
  MR
  MRS
  MS
}

type Topic {
  question: String!
  questionType: QuestionTypeEnum!
}

input TopicInput {
  question: String!
  questionType: QuestionTypeEnum!
}

input UpdateWorkingDraftInput {
  _id: ID!
  updatedDraft: JSON!
}

type UpdateWorkingDraftPayload {
  essay: Essay!
}

interface User {
  _id: ID
  email: String
  firstName: String!
  lastName: String!
  password: String!
  userName: String!
}

type Vocab {
  definition: String!
  word: String!
}

input VocabInput {
  definition: String!
  word: String!
}

type WorkingDraft {
  draft: JSON!
}
