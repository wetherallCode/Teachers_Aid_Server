/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as t from "./typeDefs"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
    time<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Time";
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
    JSON<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    JSON<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddCourseToTeacherInput: { // input type
    courseId: string; // ID!
    teacherId: string; // ID!
  }
  AddNewChapterInput: { // input type
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
    textTitle: string; // String!
  }
  AddNewTextInput: { // input type
    ownerId: string; // ID!
    textTitle: string; // String!
  }
  AddStudentToCourseInput: { // input type
    courseId: string; // ID!
    studentId: string; // ID!
  }
  AddVocabWordInput: { // input type
    _id: string; // ID!
    definition: string; // String!
    position: number; // Int!
    word: string; // String!
  }
  AssignEssayInput: { // input type
    assignedCourseId: string[]; // [String!]!
    dueDate: any; // Date!
    hasAssignerId: string; // String!
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    maxPoints: number; // Int!
    readings: NexusGenInputs['ReadingsInput']; // ReadingsInput!
    topic: NexusGenInputs['TopicInput']; // TopicInput!
  }
  ChangeVocabWordInput: { // input type
    _id: string; // ID!
    definition: string; // String!
    newDefinition: string; // String!
    newWord: string; // String!
    word: string; // String!
  }
  CreateCourseInput: { // input type
    period: string; // String!
  }
  CreateLessonInput: { // input type
    afterActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    assignedCourse: string[]; // [ID!]!
    assignedDate: any; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSections: NexusGenInputs['LessonTextSectionsInput']; // LessonTextSectionsInput!
    beforeActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    duringActivities: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    essentialQuestion: string; // String!
    inUnit: string; // ID!
    questionList: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    vocabList: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
  }
  CreateTextSectionInput: { // input type
    fromChapterId: string; // String!
    hasProtocols: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    hasQuestions: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    hasVocab: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
    header: string; // String!
    pageNumbers: NexusGenInputs['PageNumbersInput']; // PageNumbersInput!
  }
  CreateUnitInput: { // input type
    unitName: string; // String!
  }
  FindAssignmentsToGradeInput: { // input type
    teacherUserName: string; // String!
  }
  FindChapterTitleInput: { // input type
    chapter_id: string; // ID!
  }
  FindChaptersInTextInput: { // input type
    textTitle: string; // String!
  }
  FindCourseByIdInput: { // input type
    courseId: string; // ID!
  }
  FindCurrentMarkingPeriodInput: { // input type
    _id: string; // ID!
  }
  FindEssayByIdInput: { // input type
    _id: string; // ID!
  }
  FindEssaysByUserNameAndMarkingPeriodInput: { // input type
    markingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    userName: string; // String!
  }
  FindLessonByCourseAndDateInput: { // input type
    courseId: string; // ID!
    lessonDate: any; // Date!
  }
  FindLessonByCourseInput: { // input type
    courseId: string; // ID!
  }
  FindLessonByIdInput: { // input type
    _id: string; // ID!
  }
  FindLessonsByUnitInput: { // input type
    unitId: string; // ID!
  }
  FindTextByTitleInput: { // input type
    title?: string | null; // String
  }
  FindTextSectionByIdInput: { // input type
    _id: string; // ID!
  }
  FindTextSectionsByChapterInput: { // input type
    fromChapterId: string; // ID!
  }
  FindTextSectionsByIdInput: { // input type
    _ids: string[]; // [ID!]!
  }
  FindUserDataInput: { // input type
    _id: string; // ID!
  }
  HasAssigner: { // input type
    assignerUserName?: string | null; // String
  }
  HasOwnerInput: { // input type
    ownerUserName?: string | null; // String
  }
  LessonTextSectionsInput: { // input type
    endingSection: string; // String!
    startingSection: string; // String!
  }
  LoginInput: { // input type
    password: string; // String!
    userName: string; // String!
  }
  PageNumbersInput: { // input type
    endingPage: number; // Int!
    startingPage: number; // Int!
  }
  ReadingsInput: { // input type
    readingPages: string; // String!
    readingSections: string; // String!
  }
  RegisterStudentInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    userName: string; // String!
  }
  RegisterTeacherInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    title: NexusGenEnums['TitleEnum']; // TitleEnum!
    userName: string; // String!
  }
  RemoveTextSectionInput: { // input type
    _id: string; // ID!
  }
  ReturnGradedEssayInput: { // input type
    _id: string; // ID!
    comments: string[]; // [String!]!
    gradedDraft: any; // JSON!
    score: number; // Int!
  }
  SetCurrentMarkingPeriodInput: { // input type
    currentMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  SubmitEssayFinalDraftInput: { // input type
    _id: string; // ID!
    late: boolean; // Boolean!
    submittedFinalDraft: NexusGenInputs['SubmittedFinalDraftsInput']; // SubmittedFinalDraftsInput!
  }
  SubmittedFinalDraftsInput: { // input type
    comments: string[]; // [String!]!
    draft: any; // JSON!
    gradingDraft: any; // JSON!
    score: number; // Int!
  }
  TextChapterInput: { // input type
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
  }
  TextInput: { // input type
    chapters: string[]; // [String!]!
    textTitle: string; // String!
  }
  TextSectionProtocolsInput: { // input type
    academicOutcomeTypes: NexusGenEnums['AcademicOutomeTypes']; // AcademicOutomeTypes!
    activityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    task: string; // String!
  }
  TextSectionQuestionsInput: { // input type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  TextSectionVocabInput: { // input type
    definition: string; // String!
    word: string; // String!
  }
  TopicInput: { // input type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  UnitInput: { // input type
    _id: string; // ID!
    unitName: string; // String!
  }
  UpdateLessonInput: { // input type
    _id: string; // ID!
    afterActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    assignedCourse: string[]; // [ID!]!
    assignedDate: any; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSections: NexusGenInputs['LessonTextSectionsInput']; // LessonTextSectionsInput!
    beforeActivity: NexusGenInputs['TextSectionProtocolsInput']; // TextSectionProtocolsInput!
    duringActivities: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    essentialQuestion: string; // String!
    inUnit: string; // ID!
    questionList: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    vocabList: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
  }
  UpdateTextSectionInput: { // input type
    _id: string; // ID!
    fromChapterId: string; // String!
    hasProtocols: NexusGenInputs['TextSectionProtocolsInput'][]; // [TextSectionProtocolsInput!]!
    hasQuestions: NexusGenInputs['TextSectionQuestionsInput'][]; // [TextSectionQuestionsInput!]!
    hasVocab: NexusGenInputs['TextSectionVocabInput'][]; // [TextSectionVocabInput!]!
    header: string; // String!
    pageNumbers: NexusGenInputs['PageNumbersInput']; // PageNumbersInput!
  }
  UpdateWorkingDraftInput: { // input type
    _id: string; // ID!
    updatedDraft: any; // JSON!
  }
}

export interface NexusGenEnums {
  AcademicOutomeTypes: "LOGIC_BUILDING" | "SCHEMA_BUIDING" | "SOCRATIC_QUESTIONS"
  MarkingPeriodEnum: "FIRST" | "FOURTH" | "SECOND" | "THIRD"
  ProtocolActivityTypes: "INDIVIDUAL" | "THINK_PAIR_SHARE"
  QuestionTypeEnum: "HOW_CAUSE_EFFECT" | "HOW_PROBLEM_SOLUTION" | "WHY_CAUSE_EFFECT"
  TitleEnum: "MISS" | "MR" | "MRS" | "MS"
}

export interface NexusGenRootTypes {
  AddCourseToTeacherPayload: { // root type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  AddNewChapterPayload: { // root type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  AddNewTextPayload: { // root type
    text: NexusGenRootTypes['Text']; // Text!
  }
  AddStudentToCoursePayload: { // root type
    student: NexusGenRootTypes['Student']; // Student!
  }
  AddVocabWordPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  AssignEssayPayload: { // root type
    essay: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  Chapter: { // root type
    _id?: string | null; // ID
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
    fromText: NexusGenRootTypes['Text']; // Text!
  }
  Course: { // root type
    _id?: string | null; // ID
    period: string; // String!
  }
  CreateCoursePayload: { // root type
    course: NexusGenRootTypes['Course']; // Course!
  }
  CreateLessonPayload: { // root type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  CreateTextSectionPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  CreateUnitPayload: { // root type
    unit: NexusGenRootTypes['Unit']; // Unit!
  }
  Essay: { // root type
    _id?: string | null; // ID
    assignedDate: any; // Date!
    dueDate: any; // Date!
    exempt: boolean; // Boolean!
    finalDraft?: NexusGenRootTypes['FinalDraftContainer'] | null; // FinalDraftContainer
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: string; // String!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
    topic: NexusGenRootTypes['Topic']; // Topic!
    workingDraft: NexusGenRootTypes['WorkingDraft']; // WorkingDraft!
  }
  FinalDraftContainer: { // root type
    returned: boolean; // Boolean!
    submitted: boolean; // Boolean!
    submittedFinalDraft: NexusGenRootTypes['SubmittedFinalDraft']; // SubmittedFinalDraft!
    submitTime?: any | null; // DateTime
  }
  FindAssignmentsToGradePayload: { // root type
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindChapterTitlePayload: { // root type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  FindChaptersInTextPayload: { // root type
    chapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
  }
  FindCourseByIdPayload: { // root type
    course: NexusGenRootTypes['Course']; // Course!
  }
  FindCurrentMarkingPeriodPayload: { // root type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  FindEssayByIdPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  FindEssaysByUserNameAndMarkingPeriodPayload: { // root type
    essay?: NexusGenRootTypes['Essay'][] | null; // [Essay!]
  }
  FindLessonByCourseAndDatePayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonByCoursePayload: { // root type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindLessonByIdPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonsByUnitPayload: { // root type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindTextByTitlePayload: { // root type
    text: NexusGenRootTypes['Text']; // Text!
  }
  FindTextSectionByIdPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  FindTextSectionsByChapterPayload: { // root type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextSectionsByIdPayload: { // root type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextsPayload: { // root type
    texts: NexusGenRootTypes['Text'][]; // [Text!]!
  }
  FindUnitsPayload: { // root type
    units: NexusGenRootTypes['Unit'][]; // [Unit!]!
  }
  FindUserDataPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  Individual: { // root type
    _id?: string | null; // ID
    assignedDate: any; // Date!
    isActive: boolean; // Boolean!
    student: NexusGenRootTypes['Student']; // Student!
  }
  Lesson: { // root type
    _id?: string | null; // ID
    afterActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    assignedCourse: NexusGenRootTypes['Course']; // Course!
    assignedDate: any; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSections: NexusGenRootTypes['LessonTextSections']; // LessonTextSections!
    beforeActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    duringActivities: NexusGenRootTypes['TextSectionProtocols'][]; // [TextSectionProtocols!]!
    essentialQuestion: string; // String!
    inUnit: NexusGenRootTypes['Unit']; // Unit!
    objectives?: string | null; // String
    questionList: NexusGenRootTypes['TextSectionQuestions'][]; // [TextSectionQuestions!]!
    vocabList: NexusGenRootTypes['TextSectionVocab'][]; // [TextSectionVocab!]!
  }
  LessonTextSections: { // root type
    endingSection: string; // String!
    startingSection: string; // String!
  }
  LoginPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  MarkingPeriod: { // root type
    _id?: string | null; // ID
    currentMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  Mutation: {};
  PageNumbers: { // root type
    endingPage: number; // Int!
    startingPage: number; // Int!
  }
  Query: {};
  Reading_Guide: { // root type
    _id?: string | null; // ID
    assignedDate: any; // Date!
    completion: string; // String!
    dueDate: any; // Date!
    exempt: boolean; // Boolean!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: string; // String!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
  }
  Readings: { // root type
    readingPages: string; // String!
    readingSections: string; // String!
  }
  RegisterStudentPayload: { // root type
    student: NexusGenRootTypes['Student']; // Student!
  }
  RegisterTeacherPayload: { // root type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  RemoveTextSectionPayload: { // root type
    removed: boolean; // Boolean!
  }
  ReturnGradedEssayPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  Score: { // root type
    earnedPoints: number; // Int!
    maxPoints: number; // Int!
  }
  SetCurrentMarkingPeriodPayload: { // root type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  Student: { // root type
    _id?: string | null; // ID
    email?: string | null; // String
    firstName: string; // String!
    inCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    lastName: string; // String!
    password: string; // String!
    userName: string; // String!
  }
  SubmitEssayFinalDraftPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  SubmittedFinalDraft: { // root type
    comments: string[]; // [String!]!
    draft: any; // JSON!
    gradingDraft: any; // JSON!
    score: number; // Int!
  }
  Teacher: { // root type
    _id?: string | null; // ID
    email?: string | null; // String
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    teachesCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    title: NexusGenEnums['TitleEnum']; // TitleEnum!
    userName: string; // String!
  }
  Test: { // root type
    _id?: string | null; // ID
    assignedDate: any; // Date!
    dueDate: any; // Date!
    exempt: boolean; // Boolean!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: string; // String!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
    testName: string; // String!
  }
  Text: { // root type
    _id?: string | null; // ID
    ownerId: string; // ID!
    textTitle: string; // String!
  }
  TextSection: { // root type
    _id?: string | null; // ID
    fromChapter: NexusGenRootTypes['Chapter']; // Chapter!
    hasProtocols: NexusGenRootTypes['TextSectionProtocols'][]; // [TextSectionProtocols!]!
    hasQuestions: NexusGenRootTypes['TextSectionQuestions'][]; // [TextSectionQuestions!]!
    hasVocab: NexusGenRootTypes['TextSectionVocab'][]; // [TextSectionVocab!]!
    header: string; // String!
    pageNumbers: NexusGenRootTypes['PageNumbers']; // PageNumbers!
  }
  TextSectionProtocols: { // root type
    academicOutcomeTypes: NexusGenEnums['AcademicOutomeTypes']; // AcademicOutomeTypes!
    activityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    task: string; // String!
  }
  TextSectionQuestions: { // root type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  TextSectionVocab: { // root type
    definition: string; // String!
    word: string; // String!
  }
  ThinkPairShare: { // root type
    _id?: string | null; // ID
    assignedDate: any; // Date!
    hadConversation: boolean; // Boolean!
    isActive: boolean; // Boolean!
    studentPair: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  Topic: { // root type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  Unit: { // root type
    _id?: string | null; // ID
    unitName: string; // String!
  }
  UpdateLessonPayload: { // root type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  UpdateTextSectionPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateVocabPayload: { // root type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateWorkingDraftPayload: { // root type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  WorkingDraft: { // root type
    draft: any; // JSON!
  }
  Assignment: NexusGenRootTypes['Essay'] | NexusGenRootTypes['Reading_Guide'] | NexusGenRootTypes['Test'];
  Protocol: NexusGenRootTypes['Individual'] | NexusGenRootTypes['ThinkPairShare'];
  User: NexusGenRootTypes['Student'] | NexusGenRootTypes['Teacher'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: Date;
  DateTime: DateTime;
  JSON: JSON;
  Time: Time;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AddCourseToTeacherInput: NexusGenInputs['AddCourseToTeacherInput'];
  AddNewChapterInput: NexusGenInputs['AddNewChapterInput'];
  AddNewTextInput: NexusGenInputs['AddNewTextInput'];
  AddStudentToCourseInput: NexusGenInputs['AddStudentToCourseInput'];
  AddVocabWordInput: NexusGenInputs['AddVocabWordInput'];
  AssignEssayInput: NexusGenInputs['AssignEssayInput'];
  ChangeVocabWordInput: NexusGenInputs['ChangeVocabWordInput'];
  CreateCourseInput: NexusGenInputs['CreateCourseInput'];
  CreateLessonInput: NexusGenInputs['CreateLessonInput'];
  CreateTextSectionInput: NexusGenInputs['CreateTextSectionInput'];
  CreateUnitInput: NexusGenInputs['CreateUnitInput'];
  FindAssignmentsToGradeInput: NexusGenInputs['FindAssignmentsToGradeInput'];
  FindChapterTitleInput: NexusGenInputs['FindChapterTitleInput'];
  FindChaptersInTextInput: NexusGenInputs['FindChaptersInTextInput'];
  FindCourseByIdInput: NexusGenInputs['FindCourseByIdInput'];
  FindCurrentMarkingPeriodInput: NexusGenInputs['FindCurrentMarkingPeriodInput'];
  FindEssayByIdInput: NexusGenInputs['FindEssayByIdInput'];
  FindEssaysByUserNameAndMarkingPeriodInput: NexusGenInputs['FindEssaysByUserNameAndMarkingPeriodInput'];
  FindLessonByCourseAndDateInput: NexusGenInputs['FindLessonByCourseAndDateInput'];
  FindLessonByCourseInput: NexusGenInputs['FindLessonByCourseInput'];
  FindLessonByIdInput: NexusGenInputs['FindLessonByIdInput'];
  FindLessonsByUnitInput: NexusGenInputs['FindLessonsByUnitInput'];
  FindTextByTitleInput: NexusGenInputs['FindTextByTitleInput'];
  FindTextSectionByIdInput: NexusGenInputs['FindTextSectionByIdInput'];
  FindTextSectionsByChapterInput: NexusGenInputs['FindTextSectionsByChapterInput'];
  FindTextSectionsByIdInput: NexusGenInputs['FindTextSectionsByIdInput'];
  FindUserDataInput: NexusGenInputs['FindUserDataInput'];
  HasAssigner: NexusGenInputs['HasAssigner'];
  HasOwnerInput: NexusGenInputs['HasOwnerInput'];
  LessonTextSectionsInput: NexusGenInputs['LessonTextSectionsInput'];
  LoginInput: NexusGenInputs['LoginInput'];
  PageNumbersInput: NexusGenInputs['PageNumbersInput'];
  ReadingsInput: NexusGenInputs['ReadingsInput'];
  RegisterStudentInput: NexusGenInputs['RegisterStudentInput'];
  RegisterTeacherInput: NexusGenInputs['RegisterTeacherInput'];
  RemoveTextSectionInput: NexusGenInputs['RemoveTextSectionInput'];
  ReturnGradedEssayInput: NexusGenInputs['ReturnGradedEssayInput'];
  SetCurrentMarkingPeriodInput: NexusGenInputs['SetCurrentMarkingPeriodInput'];
  SubmitEssayFinalDraftInput: NexusGenInputs['SubmitEssayFinalDraftInput'];
  SubmittedFinalDraftsInput: NexusGenInputs['SubmittedFinalDraftsInput'];
  TextChapterInput: NexusGenInputs['TextChapterInput'];
  TextInput: NexusGenInputs['TextInput'];
  TextSectionProtocolsInput: NexusGenInputs['TextSectionProtocolsInput'];
  TextSectionQuestionsInput: NexusGenInputs['TextSectionQuestionsInput'];
  TextSectionVocabInput: NexusGenInputs['TextSectionVocabInput'];
  TopicInput: NexusGenInputs['TopicInput'];
  UnitInput: NexusGenInputs['UnitInput'];
  UpdateLessonInput: NexusGenInputs['UpdateLessonInput'];
  UpdateTextSectionInput: NexusGenInputs['UpdateTextSectionInput'];
  UpdateWorkingDraftInput: NexusGenInputs['UpdateWorkingDraftInput'];
  AcademicOutomeTypes: NexusGenEnums['AcademicOutomeTypes'];
  MarkingPeriodEnum: NexusGenEnums['MarkingPeriodEnum'];
  ProtocolActivityTypes: NexusGenEnums['ProtocolActivityTypes'];
  QuestionTypeEnum: NexusGenEnums['QuestionTypeEnum'];
  TitleEnum: NexusGenEnums['TitleEnum'];
}

export interface NexusGenFieldTypes {
  AddCourseToTeacherPayload: { // field return type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  AddNewChapterPayload: { // field return type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  AddNewTextPayload: { // field return type
    text: NexusGenRootTypes['Text']; // Text!
  }
  AddStudentToCoursePayload: { // field return type
    student: NexusGenRootTypes['Student']; // Student!
  }
  AddVocabWordPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  AssignEssayPayload: { // field return type
    essay: NexusGenRootTypes['Essay'][]; // [Essay!]!
  }
  Chapter: { // field return type
    _id: string | null; // ID
    chapterNumber: number; // Int!
    chapterTitle: string; // String!
    fromText: NexusGenRootTypes['Text']; // Text!
    hasSections: NexusGenRootTypes['TextSection']; // TextSection!
  }
  Course: { // field return type
    _id: string | null; // ID
    hasStudents: NexusGenRootTypes['Student'][]; // [Student!]!
    hasTeacher: NexusGenRootTypes['Teacher']; // Teacher!
    period: string; // String!
  }
  CreateCoursePayload: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
  }
  CreateLessonPayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  CreateTextSectionPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  CreateUnitPayload: { // field return type
    unit: NexusGenRootTypes['Unit']; // Unit!
  }
  Essay: { // field return type
    _id: string | null; // ID
    assignedDate: any; // Date!
    dueDate: any; // Date!
    exempt: boolean; // Boolean!
    finalDraft: NexusGenRootTypes['FinalDraftContainer'] | null; // FinalDraftContainer
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: string; // String!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
    topic: NexusGenRootTypes['Topic']; // Topic!
    workingDraft: NexusGenRootTypes['WorkingDraft']; // WorkingDraft!
  }
  FinalDraftContainer: { // field return type
    returned: boolean; // Boolean!
    submitted: boolean; // Boolean!
    submittedFinalDraft: NexusGenRootTypes['SubmittedFinalDraft']; // SubmittedFinalDraft!
    submitTime: any | null; // DateTime
  }
  FindAssignmentsToGradePayload: { // field return type
    assignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
  }
  FindChapterTitlePayload: { // field return type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
  }
  FindChaptersInTextPayload: { // field return type
    chapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
  }
  FindCourseByIdPayload: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
  }
  FindCurrentMarkingPeriodPayload: { // field return type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  FindEssayByIdPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  FindEssaysByUserNameAndMarkingPeriodPayload: { // field return type
    essay: NexusGenRootTypes['Essay'][] | null; // [Essay!]
  }
  FindLessonByCourseAndDatePayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonByCoursePayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindLessonByIdPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  FindLessonsByUnitPayload: { // field return type
    lessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
  }
  FindTextByTitlePayload: { // field return type
    text: NexusGenRootTypes['Text']; // Text!
  }
  FindTextSectionByIdPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  FindTextSectionsByChapterPayload: { // field return type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextSectionsByIdPayload: { // field return type
    textSections: NexusGenRootTypes['TextSection'][]; // [TextSection!]!
  }
  FindTextsPayload: { // field return type
    texts: NexusGenRootTypes['Text'][]; // [Text!]!
  }
  FindUnitsPayload: { // field return type
    units: NexusGenRootTypes['Unit'][]; // [Unit!]!
  }
  FindUserDataPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  Individual: { // field return type
    _id: string | null; // ID
    assignedDate: any; // Date!
    isActive: boolean; // Boolean!
    student: NexusGenRootTypes['Student']; // Student!
  }
  Lesson: { // field return type
    _id: string | null; // ID
    afterActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    assignedCourse: NexusGenRootTypes['Course']; // Course!
    assignedDate: any; // Date!
    assignedMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
    assignedSections: NexusGenRootTypes['LessonTextSections']; // LessonTextSections!
    beforeActivity: NexusGenRootTypes['TextSectionProtocols']; // TextSectionProtocols!
    duringActivities: NexusGenRootTypes['TextSectionProtocols'][]; // [TextSectionProtocols!]!
    essentialQuestion: string; // String!
    inUnit: NexusGenRootTypes['Unit']; // Unit!
    objectives: string | null; // String
    questionList: NexusGenRootTypes['TextSectionQuestions'][]; // [TextSectionQuestions!]!
    vocabList: NexusGenRootTypes['TextSectionVocab'][]; // [TextSectionVocab!]!
  }
  LessonTextSections: { // field return type
    endingSection: string; // String!
    startingSection: string; // String!
  }
  LoginPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  MarkingPeriod: { // field return type
    _id: string | null; // ID
    currentMarkingPeriod: NexusGenEnums['MarkingPeriodEnum']; // MarkingPeriodEnum!
  }
  Mutation: { // field return type
    addCourseToTeacher: NexusGenRootTypes['AddCourseToTeacherPayload']; // AddCourseToTeacherPayload!
    addNewChapter: NexusGenRootTypes['AddNewChapterPayload']; // AddNewChapterPayload!
    addNewText: NexusGenRootTypes['AddNewTextPayload']; // AddNewTextPayload!
    addStudentToCourse: NexusGenRootTypes['AddStudentToCoursePayload']; // AddStudentToCoursePayload!
    addVocabWord: NexusGenRootTypes['AddVocabWordPayload']; // AddVocabWordPayload!
    assignEssay: NexusGenRootTypes['AssignEssayPayload']; // AssignEssayPayload!
    changeVocabWord: NexusGenRootTypes['UpdateVocabPayload']; // UpdateVocabPayload!
    createCourse: NexusGenRootTypes['CreateCoursePayload']; // CreateCoursePayload!
    createLesson: NexusGenRootTypes['CreateLessonPayload']; // CreateLessonPayload!
    createTextSection: NexusGenRootTypes['CreateTextSectionPayload']; // CreateTextSectionPayload!
    createUnit: NexusGenRootTypes['CreateUnitPayload']; // CreateUnitPayload!
    login: NexusGenRootTypes['LoginPayload']; // LoginPayload!
    logout: boolean; // Boolean!
    registerStudent: NexusGenRootTypes['RegisterStudentPayload']; // RegisterStudentPayload!
    RegisterTeacher: NexusGenRootTypes['RegisterTeacherPayload']; // RegisterTeacherPayload!
    removeTextSection: NexusGenRootTypes['RemoveTextSectionPayload']; // RemoveTextSectionPayload!
    returnGradedEssay: NexusGenRootTypes['ReturnGradedEssayPayload']; // ReturnGradedEssayPayload!
    setCurrentMarkingPeriod: NexusGenRootTypes['SetCurrentMarkingPeriodPayload']; // SetCurrentMarkingPeriodPayload!
    submitEssayFinalDraft: NexusGenRootTypes['SubmitEssayFinalDraftPayload']; // SubmitEssayFinalDraftPayload!
    updateLesson: NexusGenRootTypes['UpdateLessonPayload']; // UpdateLessonPayload!
    updateTextSection: NexusGenRootTypes['UpdateTextSectionPayload']; // UpdateTextSectionPayload!
    updateWorkingDraft: NexusGenRootTypes['UpdateWorkingDraftPayload']; // UpdateWorkingDraftPayload!
  }
  PageNumbers: { // field return type
    endingPage: number; // Int!
    startingPage: number; // Int!
  }
  Query: { // field return type
    findAssignmentsToGrade: NexusGenRootTypes['FindAssignmentsToGradePayload']; // FindAssignmentsToGradePayload!
    findChaptersInText: NexusGenRootTypes['FindChaptersInTextPayload']; // FindChaptersInTextPayload!
    findChapterTitle: NexusGenRootTypes['FindChapterTitlePayload']; // FindChapterTitlePayload!
    findCourseById: NexusGenRootTypes['FindCourseByIdPayload']; // FindCourseByIdPayload!
    findCurrentMarkingPeriod: NexusGenRootTypes['FindCurrentMarkingPeriodPayload']; // FindCurrentMarkingPeriodPayload!
    findEssayById: NexusGenRootTypes['FindEssayByIdPayload']; // FindEssayByIdPayload!
    findEssaysByUserNameAndMarkingPeriod: NexusGenRootTypes['FindEssaysByUserNameAndMarkingPeriodPayload']; // FindEssaysByUserNameAndMarkingPeriodPayload!
    findLessonByCourse: NexusGenRootTypes['FindLessonByCoursePayload']; // FindLessonByCoursePayload!
    findLessonByCourseAndDate: NexusGenRootTypes['FindLessonByCourseAndDatePayload']; // FindLessonByCourseAndDatePayload!
    findLessonById: NexusGenRootTypes['FindLessonByIdPayload']; // FindLessonByIdPayload!
    findLessonsByUnit: NexusGenRootTypes['FindLessonsByUnitPayload']; // FindLessonsByUnitPayload!
    findTextByTitle: NexusGenRootTypes['FindTextByTitlePayload']; // FindTextByTitlePayload!
    findTexts: NexusGenRootTypes['FindTextsPayload']; // FindTextsPayload!
    findTextSectionById: NexusGenRootTypes['FindTextSectionByIdPayload']; // FindTextSectionByIdPayload!
    findTextSectionsByChapter: NexusGenRootTypes['FindTextSectionsByChapterPayload']; // FindTextSectionsByChapterPayload!
    findTextSectionsById: NexusGenRootTypes['FindTextSectionsByIdPayload']; // FindTextSectionsByIdPayload!
    findUnits: NexusGenRootTypes['FindUnitsPayload']; // FindUnitsPayload!
    findUserData: NexusGenRootTypes['FindUserDataPayload']; // FindUserDataPayload!
    me: NexusGenRootTypes['User'] | null; // User
  }
  Reading_Guide: { // field return type
    _id: string | null; // ID
    assignedDate: any; // Date!
    completion: string; // String!
    dueDate: any; // Date!
    exempt: boolean; // Boolean!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: string; // String!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
  }
  Readings: { // field return type
    readingPages: string; // String!
    readingSections: string; // String!
  }
  RegisterStudentPayload: { // field return type
    student: NexusGenRootTypes['Student']; // Student!
  }
  RegisterTeacherPayload: { // field return type
    teacher: NexusGenRootTypes['Teacher']; // Teacher!
  }
  RemoveTextSectionPayload: { // field return type
    removed: boolean; // Boolean!
  }
  ReturnGradedEssayPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  Score: { // field return type
    earnedPoints: number; // Int!
    maxPoints: number; // Int!
  }
  SetCurrentMarkingPeriodPayload: { // field return type
    markingPeriod: NexusGenRootTypes['MarkingPeriod']; // MarkingPeriod!
  }
  Student: { // field return type
    _id: string | null; // ID
    email: string | null; // String
    firstName: string; // String!
    hasAssignments: NexusGenRootTypes['Assignment'][]; // [Assignment!]!
    inCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    lastName: string; // String!
    password: string; // String!
    userName: string; // String!
  }
  SubmitEssayFinalDraftPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  SubmittedFinalDraft: { // field return type
    comments: string[]; // [String!]!
    draft: any; // JSON!
    gradingDraft: any; // JSON!
    score: number; // Int!
  }
  Teacher: { // field return type
    _id: string | null; // ID
    email: string | null; // String
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    teachesCourses: NexusGenRootTypes['Course'][]; // [Course!]!
    title: NexusGenEnums['TitleEnum']; // TitleEnum!
    userName: string; // String!
  }
  Test: { // field return type
    _id: string | null; // ID
    assignedDate: any; // Date!
    dueDate: any; // Date!
    exempt: boolean; // Boolean!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: string; // String!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
    testName: string; // String!
  }
  Text: { // field return type
    _id: string | null; // ID
    hasChapters: NexusGenRootTypes['Chapter'][]; // [Chapter!]!
    ownerId: string; // ID!
    textTitle: string; // String!
  }
  TextSection: { // field return type
    _id: string | null; // ID
    fromChapter: NexusGenRootTypes['Chapter']; // Chapter!
    hasProtocols: NexusGenRootTypes['TextSectionProtocols'][]; // [TextSectionProtocols!]!
    hasQuestions: NexusGenRootTypes['TextSectionQuestions'][]; // [TextSectionQuestions!]!
    hasVocab: NexusGenRootTypes['TextSectionVocab'][]; // [TextSectionVocab!]!
    header: string; // String!
    pageNumbers: NexusGenRootTypes['PageNumbers']; // PageNumbers!
  }
  TextSectionProtocols: { // field return type
    academicOutcomeTypes: NexusGenEnums['AcademicOutomeTypes']; // AcademicOutomeTypes!
    activityType: NexusGenEnums['ProtocolActivityTypes']; // ProtocolActivityTypes!
    task: string; // String!
  }
  TextSectionQuestions: { // field return type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  TextSectionVocab: { // field return type
    definition: string; // String!
    word: string; // String!
  }
  ThinkPairShare: { // field return type
    _id: string | null; // ID
    assignedDate: any; // Date!
    hadConversation: boolean; // Boolean!
    isActive: boolean; // Boolean!
    studentPair: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  Topic: { // field return type
    question: string; // String!
    questionType: NexusGenEnums['QuestionTypeEnum']; // QuestionTypeEnum!
  }
  Unit: { // field return type
    _id: string | null; // ID
    hasLessons: NexusGenRootTypes['Lesson'][]; // [Lesson!]!
    unitName: string; // String!
  }
  UpdateLessonPayload: { // field return type
    lesson: NexusGenRootTypes['Lesson']; // Lesson!
  }
  UpdateTextSectionPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateVocabPayload: { // field return type
    textSection: NexusGenRootTypes['TextSection']; // TextSection!
  }
  UpdateWorkingDraftPayload: { // field return type
    essay: NexusGenRootTypes['Essay']; // Essay!
  }
  WorkingDraft: { // field return type
    draft: any; // JSON!
  }
  Assignment: { // field return type
    _id: string | null; // ID
    assignedDate: any; // Date!
    dueDate: any; // Date!
    exempt: boolean; // Boolean!
    hasAssigner: NexusGenRootTypes['Teacher']; // Teacher!
    hasOwner: NexusGenRootTypes['Student']; // Student!
    late: boolean; // Boolean!
    markingPeriod: string; // String!
    readings: NexusGenRootTypes['Readings']; // Readings!
    score: NexusGenRootTypes['Score']; // Score!
  }
  Protocol: { // field return type
    _id: string | null; // ID
    assignedDate: any; // Date!
    isActive: boolean; // Boolean!
  }
  User: { // field return type
    _id: string | null; // ID
    email: string | null; // String
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
    userName: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addCourseToTeacher: { // args
      input: NexusGenInputs['AddCourseToTeacherInput']; // AddCourseToTeacherInput!
    }
    addNewChapter: { // args
      input: NexusGenInputs['AddNewChapterInput']; // AddNewChapterInput!
    }
    addNewText: { // args
      input: NexusGenInputs['AddNewTextInput']; // AddNewTextInput!
    }
    addStudentToCourse: { // args
      input: NexusGenInputs['AddStudentToCourseInput']; // AddStudentToCourseInput!
    }
    addVocabWord: { // args
      input: NexusGenInputs['AddVocabWordInput']; // AddVocabWordInput!
    }
    assignEssay: { // args
      input: NexusGenInputs['AssignEssayInput']; // AssignEssayInput!
    }
    changeVocabWord: { // args
      input: NexusGenInputs['ChangeVocabWordInput']; // ChangeVocabWordInput!
    }
    createCourse: { // args
      input: NexusGenInputs['CreateCourseInput']; // CreateCourseInput!
    }
    createLesson: { // args
      input: NexusGenInputs['CreateLessonInput']; // CreateLessonInput!
    }
    createTextSection: { // args
      input: NexusGenInputs['CreateTextSectionInput']; // CreateTextSectionInput!
    }
    createUnit: { // args
      input: NexusGenInputs['CreateUnitInput']; // CreateUnitInput!
    }
    login: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    registerStudent: { // args
      input: NexusGenInputs['RegisterStudentInput']; // RegisterStudentInput!
    }
    RegisterTeacher: { // args
      input: NexusGenInputs['RegisterTeacherInput']; // RegisterTeacherInput!
    }
    removeTextSection: { // args
      input: NexusGenInputs['RemoveTextSectionInput']; // RemoveTextSectionInput!
    }
    returnGradedEssay: { // args
      input: NexusGenInputs['ReturnGradedEssayInput']; // ReturnGradedEssayInput!
    }
    setCurrentMarkingPeriod: { // args
      input: NexusGenInputs['SetCurrentMarkingPeriodInput']; // SetCurrentMarkingPeriodInput!
    }
    submitEssayFinalDraft: { // args
      input: NexusGenInputs['SubmitEssayFinalDraftInput']; // SubmitEssayFinalDraftInput!
    }
    updateLesson: { // args
      input: NexusGenInputs['UpdateLessonInput']; // UpdateLessonInput!
    }
    updateTextSection: { // args
      input: NexusGenInputs['UpdateTextSectionInput']; // UpdateTextSectionInput!
    }
    updateWorkingDraft: { // args
      input: NexusGenInputs['UpdateWorkingDraftInput']; // UpdateWorkingDraftInput!
    }
  }
  Query: {
    findAssignmentsToGrade: { // args
      input: NexusGenInputs['FindAssignmentsToGradeInput']; // FindAssignmentsToGradeInput!
    }
    findChaptersInText: { // args
      input: NexusGenInputs['FindChaptersInTextInput']; // FindChaptersInTextInput!
    }
    findChapterTitle: { // args
      input: NexusGenInputs['FindChapterTitleInput']; // FindChapterTitleInput!
    }
    findCourseById: { // args
      input: NexusGenInputs['FindCourseByIdInput']; // FindCourseByIdInput!
    }
    findEssayById: { // args
      input: NexusGenInputs['FindEssayByIdInput']; // FindEssayByIdInput!
    }
    findEssaysByUserNameAndMarkingPeriod: { // args
      input: NexusGenInputs['FindEssaysByUserNameAndMarkingPeriodInput']; // FindEssaysByUserNameAndMarkingPeriodInput!
    }
    findLessonByCourse: { // args
      input: NexusGenInputs['FindLessonByCourseInput']; // FindLessonByCourseInput!
    }
    findLessonByCourseAndDate: { // args
      input: NexusGenInputs['FindLessonByCourseAndDateInput']; // FindLessonByCourseAndDateInput!
    }
    findLessonById: { // args
      input: NexusGenInputs['FindLessonByIdInput']; // FindLessonByIdInput!
    }
    findLessonsByUnit: { // args
      input: NexusGenInputs['FindLessonsByUnitInput']; // FindLessonsByUnitInput!
    }
    findTextByTitle: { // args
      input: NexusGenInputs['FindTextByTitleInput']; // FindTextByTitleInput!
    }
    findTextSectionById: { // args
      input: NexusGenInputs['FindTextSectionByIdInput']; // FindTextSectionByIdInput!
    }
    findTextSectionsByChapter: { // args
      input: NexusGenInputs['FindTextSectionsByChapterInput']; // FindTextSectionsByChapterInput!
    }
    findTextSectionsById: { // args
      input: NexusGenInputs['FindTextSectionsByIdInput']; // FindTextSectionsByIdInput!
    }
    findUserData: { // args
      input: NexusGenInputs['FindUserDataInput']; // FindUserDataInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Assignment: "Essay" | "Reading_Guide" | "Test"
  Protocol: "Individual" | "ThinkPairShare"
  User: "Student" | "Teacher"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AddCourseToTeacherPayload" | "AddNewChapterPayload" | "AddNewTextPayload" | "AddStudentToCoursePayload" | "AddVocabWordPayload" | "AssignEssayPayload" | "Chapter" | "Course" | "CreateCoursePayload" | "CreateLessonPayload" | "CreateTextSectionPayload" | "CreateUnitPayload" | "Essay" | "FinalDraftContainer" | "FindAssignmentsToGradePayload" | "FindChapterTitlePayload" | "FindChaptersInTextPayload" | "FindCourseByIdPayload" | "FindCurrentMarkingPeriodPayload" | "FindEssayByIdPayload" | "FindEssaysByUserNameAndMarkingPeriodPayload" | "FindLessonByCourseAndDatePayload" | "FindLessonByCoursePayload" | "FindLessonByIdPayload" | "FindLessonsByUnitPayload" | "FindTextByTitlePayload" | "FindTextSectionByIdPayload" | "FindTextSectionsByChapterPayload" | "FindTextSectionsByIdPayload" | "FindTextsPayload" | "FindUnitsPayload" | "FindUserDataPayload" | "Individual" | "Lesson" | "LessonTextSections" | "LoginPayload" | "MarkingPeriod" | "Mutation" | "PageNumbers" | "Query" | "Reading_Guide" | "Readings" | "RegisterStudentPayload" | "RegisterTeacherPayload" | "RemoveTextSectionPayload" | "ReturnGradedEssayPayload" | "Score" | "SetCurrentMarkingPeriodPayload" | "Student" | "SubmitEssayFinalDraftPayload" | "SubmittedFinalDraft" | "Teacher" | "Test" | "Text" | "TextSection" | "TextSectionProtocols" | "TextSectionQuestions" | "TextSectionVocab" | "ThinkPairShare" | "Topic" | "Unit" | "UpdateLessonPayload" | "UpdateTextSectionPayload" | "UpdateVocabPayload" | "UpdateWorkingDraftPayload" | "WorkingDraft";

export type NexusGenInputNames = "AddCourseToTeacherInput" | "AddNewChapterInput" | "AddNewTextInput" | "AddStudentToCourseInput" | "AddVocabWordInput" | "AssignEssayInput" | "ChangeVocabWordInput" | "CreateCourseInput" | "CreateLessonInput" | "CreateTextSectionInput" | "CreateUnitInput" | "FindAssignmentsToGradeInput" | "FindChapterTitleInput" | "FindChaptersInTextInput" | "FindCourseByIdInput" | "FindCurrentMarkingPeriodInput" | "FindEssayByIdInput" | "FindEssaysByUserNameAndMarkingPeriodInput" | "FindLessonByCourseAndDateInput" | "FindLessonByCourseInput" | "FindLessonByIdInput" | "FindLessonsByUnitInput" | "FindTextByTitleInput" | "FindTextSectionByIdInput" | "FindTextSectionsByChapterInput" | "FindTextSectionsByIdInput" | "FindUserDataInput" | "HasAssigner" | "HasOwnerInput" | "LessonTextSectionsInput" | "LoginInput" | "PageNumbersInput" | "ReadingsInput" | "RegisterStudentInput" | "RegisterTeacherInput" | "RemoveTextSectionInput" | "ReturnGradedEssayInput" | "SetCurrentMarkingPeriodInput" | "SubmitEssayFinalDraftInput" | "SubmittedFinalDraftsInput" | "TextChapterInput" | "TextInput" | "TextSectionProtocolsInput" | "TextSectionQuestionsInput" | "TextSectionVocabInput" | "TopicInput" | "UnitInput" | "UpdateLessonInput" | "UpdateTextSectionInput" | "UpdateWorkingDraftInput";

export type NexusGenEnumNames = "AcademicOutomeTypes" | "MarkingPeriodEnum" | "ProtocolActivityTypes" | "QuestionTypeEnum" | "TitleEnum";

export type NexusGenInterfaceNames = "Assignment" | "Protocol" | "User";

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "JSON" | "String" | "Time";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: t.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}